##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#

proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:10m;


map $http_user_agent $browser_type {
    default                          "Edge";
    "~Mozilla.*Firefox*"             "Firefox";
    "~Chrome*"                       "Chrome";
}

server {

	listen 80 default_server;
	listen [::]:80 default_server;

	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	root /var/www/html;

	# Add index.php to the list if you are using PHP
	#index index.html index.htm index.nginx-debian.html;

	server_name _;
	error_log /var/log/nginx/error.log debug;
	
	# Replace envId & apiKey with your own flagship credentials, for pollingInterval, logLevel, trackingEnabled check the documentation
	fs_init 'envId' 'apiKey' 'pollingInterval' 'logLevel' 'trackingEnabled';
	
	# Note that the cache here is not implemented, since we don't have any proxy_pass, this is just an example
	location /with_cache {

		fs_visitor_id $request_id;
		fs_visitor_context browser:$browser_type;

		set $visitor_context browser:$browser_type;

		proxy_buffering on;
		proxy_cache my_cache;
		proxy_cache_valid any 10m;

		add_header X-Flags $fs_flags;
		add_header X-Browser_type $browser_type;

		proxy_set_header X-Flagship-Flags $fs_flags;
		proxy_set_header X-Visitor-Id $request_id;
		proxy_set_header X-Visitor-Context $visitor_context;

		proxy_cache_key $fs_flags;
		
		default_type text/html;

		return 200 $fs_flags;
	}

    	location /without_cache {

		fs_visitor_id $browser_type;
		fs_visitor_context example:version1;

		default_type text/html;

		return 200 $fs_flags;
	}
	
	# pass PHP scripts to FastCGI server
	#
	#location ~ \.php$ {
	#	include snippets/fastcgi-php.conf;
	#
	#	# With php-fpm (or other unix sockets):
	#	fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
	#	# With php-cgi (or other tcp sockets):
	#	fastcgi_pass 127.0.0.1:9000;
	#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}
